/**
 * eDesign - Runtime - Web Socket Server Package
 *
 * @copyright 2024 Elrest Automations Systeme GMBH
 */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrendService = void 0;
const rxjs_1 = require("rxjs");
const _1 = require(".");
const WDXSchema = __importStar(require("@wago/wdx-schema-base"));
class TrendService extends _1.AbstractAPIService {
    delete(uuid) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.DeleteRequest(uuid);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (WDXSchema.WDX.Schema.Message.Type.TrendingDeleteResponse ===
                message.type &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                response.complete();
                subscription.unsubscribe();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    detail(uuid) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.DetailRequest(uuid);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (WDXSchema.WDX.Schema.Message.Type.TrendingDetailResponse ===
                message.type &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                response.complete();
                subscription.unsubscribe();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    save(trend) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.SaveRequest(trend);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (message.type ===
                WDXSchema.WDX.Schema.Message.Type.TrendingSaveResponse &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                response.complete();
                subscription.unsubscribe();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    list(active, offset = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_OFFSET, limit = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_LIMIT) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.ListRequest({
            where: {
                active: active,
            },
            take: limit,
            skip: offset,
        });
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (message.type ===
                WDXSchema.WDX.Schema.Message.Type.TrendingListResponse &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                response.complete();
                subscription.unsubscribe();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    unregister(uuid) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.UnsubscribeRequest(uuid);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (message.type ===
                WDXSchema.WDX.Schema.Message.Type
                    .TrendingUnsubscribeResponse &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(undefined);
                response.complete();
                subscription.unsubscribe();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    register(uuid) {
        const request = new WDXSchema.WDX.Schema.Message.Trend.SubscribeRequest(uuid);
        const response = new rxjs_1.Subject();
        const topic = `${WDXSchema.WDX.Schema.Message.Type.TrendingUpdate}-${uuid}`;
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if ((message.type ===
                WDXSchema.WDX.Schema.Message.Type
                    .TrendingSubscribeResponse &&
                message.uuid === request.uuid) ||
                (topic === message.topic &&
                    message.type ===
                        WDXSchema.WDX.Schema.Message.Type.TrendingUpdate)) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    data(uuid, offset = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_OFFSET, limit = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_LIMIT, sortColumn, sortOrder, dateFrom, dateTo, dateFormat) {
        let params = {
            take: limit,
            skip: offset,
        };
        if (undefined !== sortOrder && undefined !== sortColumn) {
            params = Object.assign(params, {
                order: {
                    [sortColumn]: sortOrder,
                }
            });
        }
        const body = new WDXSchema.WDX.Schema.Model.Trend.DataRequestBody();
        body.conditions = params;
        body.dateFormat = dateFormat;
        body.dateFrom = dateFrom;
        body.dateTo = dateTo;
        body.trendUuid = uuid;
        const request = new WDXSchema.WDX.Schema.Message.Trend.DataRequest(body);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (message.type ===
                WDXSchema.WDX.Schema.Message.Type.TrendingDataResponse &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                subscription.unsubscribe();
                response.complete();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
    export(uuid, type, dateFrom, dateTo, offset = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_OFFSET, limit = WDXSchema.WDX.Schema.Model.Pagination.Request.DEFAULT_LIMIT, sortColumn, sortOrder, dateFormat, timezone) {
        let params = {
            take: limit,
            skip: offset,
        };
        if (undefined !== sortOrder && undefined !== sortColumn) {
            params = Object.assign(params, {
                order: {
                    [sortColumn]: sortOrder,
                }
            });
        }
        const body = new WDXSchema.WDX.Schema.Model.Trend.ExportRequestBody();
        body.conditions = params;
        body.dateFormat = dateFormat;
        body.timezone = timezone;
        body.dateFrom = dateFrom;
        body.dateTo = dateTo;
        body.trendUuid = uuid;
        body.type = type;
        const request = new WDXSchema.WDX.Schema.Message.Trend.ExportRequest(body);
        const response = new rxjs_1.Subject();
        const subscription = this._clientService.incommingMessages.subscribe((message) => {
            if (message.type ===
                WDXSchema.WDX.Schema.Message.Type
                    .TrendingExportResponse &&
                message.uuid === request.uuid) {
                message.error ? response.error(message.error) :
                    response.next(message.body);
                subscription.unsubscribe();
                response.complete();
            }
        });
        this._clientService.sendMessage(request);
        return response.asObservable();
    }
}
exports.TrendService = TrendService;
//# sourceMappingURL=TrendService.js.map