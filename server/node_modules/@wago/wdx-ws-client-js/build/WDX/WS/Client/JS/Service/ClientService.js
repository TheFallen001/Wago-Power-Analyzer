/**
 * eDesign - Runtime - Web Socket Server Package
 *
 * @copyright 2024 Elrest Automations Systeme GMBH
 */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientService = exports.Status = void 0;
const DataService_1 = require("./DataService");
const ScriptService_1 = require("./ScriptService");
const InstanceService_1 = require("./InstanceService");
const RuntimeService_1 = require("./RuntimeService");
const AlarmService_1 = require("./AlarmService");
const ws_1 = __importDefault(require("ws"));
// const WDXWS = typeof globalThis?.WebSocket !== "undefined" ?
// globalThis.WebSocket : require("websocket");
const WDXSchema = __importStar(require("@wago/wdx-schema-base"));
const rxjs_1 = require("rxjs");
const TrendService_1 = require("./TrendService");
const ChartService_1 = require("./ChartService");
var Status;
(function (Status) {
    Status["CONNECTED"] = "CONNECTED";
    Status["CONNECTING"] = "CONNECTING";
    Status["DISCONNECTED"] = "DISCONNECTED";
})(Status || (exports.Status = Status = {}));
class ClientService {
    __keepAliveTimeout;
    __KEEPALIVE_INTERVAL = 60000;
    __RECONNECT_TIMEOUT = 1000;
    __status = new rxjs_1.BehaviorSubject(Status.DISCONNECTED);
    __wsClientConfiguration;
    __wsClient;
    __dataService;
    __scriptService;
    __instanceService;
    __runtimeService;
    __alarmService;
    __trendService;
    __chartService;
    __incommingMessages = new rxjs_1.Subject();
    constructor(wsClientConfiguration) {
        this.__wsClientConfiguration = wsClientConfiguration;
    }
    async connect() {
        return new Promise((resolve, reject) => {
            try {
                if (Status.CONNECTED === this.status.getValue()) {
                    resolve();
                    return;
                }
                else if (Status.CONNECTING === this.status.getValue()) {
                    this.status.subscribe({
                        next: (status) => {
                            if (Status.CONNECTED === status) {
                                resolve();
                            }
                            else if (Status.DISCONNECTED === status) {
                                reject('Not connected');
                            }
                        },
                        error: (error) => {
                            reject(error);
                        }
                    });
                    return;
                }
                this.__status.next(Status.CONNECTING);
                this.__wsClient = new ws_1.default(this.__getWsClientUrl());
                this.__wsClient.on('open', () => {
                    this.__onOpen();
                    resolve();
                });
                this.__wsClient.on('error', (error) => { });
                this.__wsClient.on('close', (code, desc) => {
                    this.__status.next(Status.DISCONNECTED);
                    this.__stopKeepAlive();
                    if (1005 !== code) {
                        this.__reconnect();
                    }
                });
                this.__wsClient.on('message', (message) => {
                    this.__onMessage(message);
                });
                this.__status.next(Status.CONNECTED);
                this.__startKeepAlive();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    __getWsClientUrl() {
        return (this.__wsClientConfiguration?.url) ?
            this.__wsClientConfiguration?.url :
            `${this.__wsClientConfiguration?.protocol}://${this.__wsClientConfiguration?.host}:${this.__wsClientConfiguration?.port}${this.__wsClientConfiguration?.path ?? ''}`;
    }
    async __sendKeepAlive() {
        await this.sendMessage(new WDXSchema.WDX.Schema.Message.KeepAlive());
    }
    __startKeepAlive() {
        if (undefined === this.__keepAliveTimeout) {
            this.__keepAliveTimeout = setInterval(async () => {
                await this.__sendKeepAlive();
            }, this.__KEEPALIVE_INTERVAL);
            this.__keepAliveTimeout.unref();
        }
    }
    __stopKeepAlive() {
        if (undefined !== this.__keepAliveTimeout) {
            clearTimeout(this.__keepAliveTimeout);
            this.__keepAliveTimeout = undefined;
        }
    }
    __onOpen() { }
    __reconnect() {
        console.error(`Reconnecting after ${this.__RECONNECT_TIMEOUT}ms`);
        setTimeout(async () => {
            try {
                await this.connect();
            }
            catch (error) {
                this.__reconnect();
            }
        }, this.__wsClientConfiguration?.reconnectTimeout ??
            this.__RECONNECT_TIMEOUT);
    }
    __onError(error) {
        this.__status.next(Status.DISCONNECTED);
        console.error('Client error ' + error.message);
    }
    __onMessage(message) {
        this.__incommingMessages.next(JSON.parse((message.toString())));
    }
    async sendMessage(message) {
        return new Promise((resolve, reject) => {
            try {
                const data = JSON.stringify(message);
                this.__wsClient?.send(data, () => {
                    resolve();
                });
            }
            catch (err) {
                reject();
            }
        });
    }
    disconnect() {
        this.__wsClient?.close();
        this.__wsClient = undefined;
    }
    get status() {
        return this.__status;
    }
    get incommingMessages() {
        return this.__incommingMessages;
    }
    get alarmService() {
        if (undefined === this.__alarmService) {
            this.__alarmService = new AlarmService_1.AlarmService(this);
        }
        return this.__alarmService;
    }
    get chartService() {
        if (undefined === this.__chartService) {
            this.__chartService = new ChartService_1.ChartService(this);
        }
        return this.__chartService;
    }
    get trendService() {
        if (undefined === this.__trendService) {
            this.__trendService = new TrendService_1.TrendService(this);
        }
        return this.__trendService;
    }
    get dataService() {
        if (undefined === this.__dataService) {
            this.__dataService = new DataService_1.DataService(this);
        }
        return this.__dataService;
    }
    get scriptService() {
        if (undefined === this.__scriptService) {
            this.__scriptService = new ScriptService_1.ScriptService(this);
        }
        return this.__scriptService;
    }
    get instanceService() {
        if (undefined === this.__instanceService) {
            this.__instanceService = new InstanceService_1.InstanceService(this);
        }
        return this.__instanceService;
    }
    get runtimeService() {
        if (undefined === this.__runtimeService) {
            this.__runtimeService = new RuntimeService_1.RuntimeService(this);
        }
        return this.__runtimeService;
    }
}
exports.ClientService = ClientService;
//# sourceMappingURL=ClientService.js.map