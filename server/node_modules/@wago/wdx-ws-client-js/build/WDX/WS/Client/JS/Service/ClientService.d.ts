/**
 * eDesign - Runtime - Web Socket Server Package
 *
 * @copyright 2024 Elrest Automations Systeme GMBH
 */
import { DataService } from './DataService';
import { ScriptService } from './ScriptService';
import { InstanceService } from './InstanceService';
import { RuntimeService } from './RuntimeService';
import { AlarmService } from './AlarmService';
import { Configuration } from '../Configuration/Configuration';
import * as WDXSchema from '@wago/wdx-schema-base';
import { BehaviorSubject, Subject } from 'rxjs';
import { TrendService } from './TrendService';
import { ChartService } from './ChartService';
export declare enum Status {
    CONNECTED = "CONNECTED",
    CONNECTING = "CONNECTING",
    DISCONNECTED = "DISCONNECTED"
}
export declare class ClientService {
    private __keepAliveTimeout;
    private readonly __KEEPALIVE_INTERVAL;
    private readonly __RECONNECT_TIMEOUT;
    private readonly __status;
    private __wsClientConfiguration;
    private __wsClient;
    private __dataService;
    private __scriptService;
    private __instanceService;
    private __runtimeService;
    private __alarmService;
    private __trendService;
    private __chartService;
    private __incommingMessages;
    constructor(wsClientConfiguration: Configuration);
    connect(): Promise<void>;
    private __getWsClientUrl;
    private __sendKeepAlive;
    private __startKeepAlive;
    private __stopKeepAlive;
    private __onOpen;
    private __reconnect;
    private __onError;
    private __onMessage;
    sendMessage(message: WDXSchema.WDX.Schema.Message.AbstractMessage): Promise<void>;
    disconnect(): void;
    get status(): BehaviorSubject<Status>;
    get incommingMessages(): Subject<WDXSchema.WDX.Schema.Message.AbstractMessage>;
    get alarmService(): AlarmService;
    get chartService(): ChartService;
    get trendService(): TrendService;
    get dataService(): DataService;
    get scriptService(): ScriptService;
    get instanceService(): InstanceService;
    get runtimeService(): RuntimeService;
}
